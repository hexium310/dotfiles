[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  command! -nargs=0 DeinUpdate call s:dein_update()
  command! -nargs=0 DeinRecache call dein#recache_runtimepath()

  function s:dein_update() abort
    if empty(g:dein#install_github_api_token)
      call dein#update()
    else
      call dein#check_update(v:true)
    endif

    let buf = nvim_create_buf(v:false, v:true)
    split
    call nvim_set_current_buf(buf)
    put! ='Updating...'
    call dein#set_hook([], 'hook_done_update', 'call Display_updates_log(' . buf . ')')
  endfunction

  function! Display_updates_log(buf) abort
    let log = dein#get_updates_log()
    call nvim_buf_set_lines(a:buf, 0, -1, v:true, add(split(log, "\n"), ""))
  endfunction

  autocmd VimEnter * call dein#call_hook('post_source')
'''

[[plugins]]
repo = 'ii14/onedark.nvim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  call plugin#lightline#set_variables()
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = ['f', 'F', 't', 'T', '<Plug>']
hook_add = '''
  let g:clever_f_use_migemo = 1
  let g:clever_f_fix_key_direction = 1
  map ; <Plug>(clever-f-repeat-forward)
  map , <Plug>(clever-f-repeat-back)
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'css', 'javascript', 'typescript', 'typescriptreact']
hook_add = '''
  let g:user_emmet_settings = {
        \  'javascript': {
        \    'extends': 'jsx',
        \  },
        \  'typescript': {
        \    'extends': 'jsx',
        \  },
        \  'typescriptreact': {
        \    'extends': 'jsx',
        \  },
        \  'variables': {
        \    'lang': 'ja',
        \  },
        \}
  let g:user_emmet_leader_key = '<silent> <C-e>'
  imap <C-e> <Nop>
  nmap <C-e> <Nop>
  vmap <C-e> <Nop>
  const items = [
        \ {'key': ',', 'plug': 'emmet-expand-abbr'},
        \ {'key': ';', 'plug': 'emmet-expand-word'},
        \ {'key': 'u', 'plug': 'emmet-update-tag'},
        \ {'key': 'd', 'plug': 'emmet-balance-tag-inward'},
        \ {'key': 'D', 'plug': 'emmet-balance-tag-outword'},
        \ {'key': 'n', 'plug': 'emmet-move-next'},
        \ {'key': 'N', 'plug': 'emmet-move-prev'},
        \ {'key': 'i', 'plug': 'emmet-image-size'},
        \ {'key': 'I', 'plug': 'emmet-image-encode'},
        \ {'key': '/', 'plug': 'emmet-toggle-comment'},
        \ {'key': 'j', 'plug': 'emmet-split-join-tag'},
        \ {'key': 'k', 'plug': 'emmet-remove-tag'},
        \ {'key': 'a', 'plug': 'emmet-anchorize-url'},
        \ {'key': 'A', 'plug': 'emmet-anchorize-summary'},
        \ {'key': 'm', 'plug': 'emmet-merge-lines'},
  \ ]
  for item in items
    execute 'imap <silent><expr> <C-e>' . item.key . ' pumvisible() ? "\<C-y><Plug>(' . item.plug . ')" : "\<Plug>(' . item.plug . ')"'
  endfor
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  nmap <silent> <Esc><Esc> <Plug>(anzu-clear-search-status):nohlsearch<Cr>
  nmap n <Plug>(anzu-n)zz
  nmap N <Plug>(anzu-N)zz
  nmap * <Plug>(anzu-star)zz
  nmap # <Plug>(anzu-sharp)zz
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = 'gc'
hook_add = '''
  let g:caw_operator_keymappings = 1
'''

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['javascript', 'json', 'typescript', 'typescriptreact', 'markdown']
hook_add = '''
  call plugin#ale#set_variable()
  call plugin#ale#set_maps()
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
if = 'executable("node")'
hook_add ='''
  call plugin#coc#set_variables()
  call plugin#coc#set_maps()
  call plugin#coc#set_commands()
  call plugin#coc#autocmd()
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['ale', 'lightline.vim']
on_ft = ['typescript', 'typescriptreact']
hook_add = '''
  let g:lightline#ale#indicator_checking = '...'
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
if = 'executable("fzf")'
hook_add = '''
  set runtimepath+=$ZPLG_HOME/plugins/junegunn---fzf
  call plugin#fzf#set_variables()
  call plugin#fzf#set_maps()
  call plugin#fzf#set_commands()
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  call plugin#gitgutter#set_variables()
  call plugin#gitgutter#set_maps()
'''

[[plugins]]
repo = 'chriskempson/base16-vim'
hook_add = '''
  let g:base16colorspace = 256
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_map = ['gJ', 'gS']
hook_add = '''
  let g:splitjoin_html_attributes_bracket_on_new_line = 1
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
  let g:conflict_marker_enable_mappings = 0
  let g:conflict_marker_enable_highlight = 0
  nmap ]f <Plug>(conflict-marker-next-hunk)
  nmap [f <Plug>(conflict-marker-prev-hunk)
'''

[[plugins]]
repo = 'kana/vim-tabpagecd'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = [
  'G',
  'Git',
  'Ggrep',
  'Glgrep',
  'Gclog',
  'Gllog',
  'Gcd',
  'Glcd',
  'Gedit',
  'Gsplit',
  'Gvsplit',
  'Gtabedit',
  'Gpedit',
  'Gread',
  'Gwrite',
  'Gwq',
  'Gdiffsplit',
  'Gvdiffsplit',
  'Ghdiffsplit',
  'GMove',
  'GRename',
  'GDelete',
  'GRemove',
  'GBrowse',
]
hook_add ='''
  call plugin#fugitive#set_maps()
'''

[[plugins]]
repo = 'RRethy/vim-hexokinase'
if = 'executable("go")'
build = '''
  make hexokinase
'''
hook_add = '''
  let g:Hexokinase_virtualText = '‚óè'
  let g:Hexokinase_ftAutoload = ['*']
  let g:Hexokinase_refreshEvents = ['BufEnter', 'TextChanged', 'TextChangedI']
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'VimEnter'
hook_post_source = '''
  lua require('plugins/nvim-treesitter')()
'''

[[plugins]]
repo = 'akinsho/nvim-toggleterm.lua'
on_cmd = [
  'ToggleTerm',
  'TermExec',
  'Yarn',
]
on_map = {
  ni = '<C-t>',
}
hook_post_source = '''
  lua require('plugins/toggleterm')()
'''

[[plugins]]
repo = 'qpkorr/vim-bufkill'
hook_add = '''
  cabbrev bd BD
'''

[[plugins]]
repo = 'himanoa/goshiteki'
if = 'executable("gh") && executable("jq")'

[[plugins]]
repo = 'hexium310/github-notif.vim'
hook_add = '''
  let g:github_notif_token = $GITHUB_TOKEN
  let g:github_notif_fetch_instantly = 1
'''

[[plugins]]
repo = 'chaoren/vim-wordmotion'
hook_add = '''
  let g:wordmotion_nomap = 1
  nmap w <Plug>WordMotion_w
  nmap b <Plug>WordMotion_b
  nmap e <Plug>WordMotion_e
  nmap ge <Plug>WordMotion_ge
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tversteeg/registers.nvim'
hook_add = '''
  let g:registers_window_min_height = 15
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = ['nvim-treesitter']
on_ft = ['query']
on_cmd = ['TSHighlightCapturesUnderCursor', 'TSPlaygroundToggle']

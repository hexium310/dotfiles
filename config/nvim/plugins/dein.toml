[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \  'colorscheme': 'onedark',
        \  'active': {
        \    'left': [
        \      ['mode', 'paste'],
        \      ['readonly', 'filename', 'modified', 'dir', 'cocstatus'],
        \      ['sign'],
        \      ['anzu'],
        \    ],
        \    'right': [
        \      ['lineinfo', 'rows'],
        \      ['fileencoding', 'filetype'],
        \      ['ale_checking', 'ale_errors', 'ale_warnings', 'ale_ok'],
        \    ],
        \  },
        \  'tabline': {
        \    'right': [],
        \  },
        \  'component': {
        \    'dir': '%.35(%{expand("%:h:s?\\S$?\\0/?")}%)',
        \    'rows': '%LL',
        \  },
        \  'component_function': {
        \    'readonly': 'Readonly',
        \    'anzu': 'anzu#search_status',
        \    'cocstatus': 'coc#status',
        \  },
        \  'component_expand': {
        \    'ale_checking': 'lightline#ale#checking',
        \    'ale_warnings': 'lightline#ale#warnings',
        \    'ale_errors': 'lightline#ale#errors',
        \    'ale_ok': 'lightline#ale#ok',
        \  },
        \  'component_type': {
        \    'ale_checking': 'left',
        \    'ale_warnings': 'warning',
        \    'ale_errors': 'error',
        \    'ok': 'left',
        \  },
        \}

  function! Readonly()
    return &readonly || &filetype == 'help' ? 'ðŸ‘€' : ''
  endfunction
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_smart_case = 1
  let g:clever_f_use_migemo = 1
  let g:clever_f_fix_key_direction = 1
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  let g:context_filetype#filetypes = {
        \   'typescript.tsx': [
        \     {
        \       'start': '\v(styled\..*|css)`',
        \       'end': '`',
        \       'filetype': 'sass',
        \     },
        \   ],
        \ }
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'lambdalisue/vim-gista'

[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
  nnoremap <silent> <Space>e :Dirvish<CR>
  nnoremap <silent> <Space>r :Dirvish %<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'css', 'javascript', 'typescript']
hook_add = '''
  let g:user_emmet_settings = {
        \  'javascript': {
        \    'extends': 'jsx',
        \  },
        \  'typescript': {
        \    'extends': 'jsx',
        \  },
        \  'variables': {
        \    'lang': 'ja',
        \  },
        \}
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap <silent> <Esc><Esc> <Plug>(anzu-clear-search-status):nohlsearch<Cr>
  nmap n <Plug>(anzu-n)zz
  nmap N <Plug>(anzu-N)zz
  nmap * <Plug>(anzu-star)zz
  nmap # <Plug>(anzu-sharp)zz

  augroup vim-anzu
    autocmd!
    autocmd WinLeave, TabLeave * call anzu#clear_search_status()
  augroup END
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
  nmap <Space>J <Plug>(jplus-getchar)
  vmap <Space>J <Plug>(jplus-getchar)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)
  nmap <silent>sd <Plug>(operator-surround-delete)
  nmap <silent>sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
hook_add = '''
  map y <Plug>(operator-flashy)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'
hook_add = '''
  nmap R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'

[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  let g:caw_operator_keymappings = 1
  nmap <Space>c <Plug>(caw:prefix)
  vmap <Space>c <Plug>(caw:prefix)
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_linters = {
        \  'typescript': ['eslint'],
        \  'javascript': ['eslint'],
        \}
  let g:ale_fixers = {
        \  'typescript': ['eslint'],
        \  'javascript': ['eslint'],
        \}
  let g:ale_lint_delay = 50
  let g:ale_echo_msg_format = '%severity% [%linter%] %s'

  nmap <silent> [a <Plug>(ale_previous_wrap)
  nmap <silent> ]a <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
hook_add ='''
  inoremap <silent><expr> <Tab>
        \ pumvisible() ? coc#_select_confirm() :
        \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump', ''])\<Cr>" :
        \ <SID>check_back_space() ? "\<Tab>" :
        \ coc#refresh()

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction

  nmap <silent> [c <Plug>(coc-diagnostic-prev)
  nmap <silent> ]c <Plug>(coc-diagnostic-next)

  let g:coc_snippet_next = '<Tab>'
  let g:coc_snippet_prev = '<S-Tab>'

  let g:coc_global_extensions = [
        \   'coc-snippets',
        \   'coc-highlight',
        \   'coc-emmet',
        \   'coc-tsserver',
        \   'coc-rls',
        \   'coc-json',
        \   'coc-yaml',
        \ ]
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
	set runtimepath+=/usr/local/opt/fzf

  let g:fzf_rg_glob_files = [
        \   '!LICENSE',
        \   '!README.md',
        \   '!yarn.lock',
        \   '!package-lock.json',
        \ ]
  let g:fzf_rg_glob = join(map(g:fzf_rg_glob_files, '"-g ''" . v:val . "''"'), ' ')

  command! -bang -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --line-number --no-heading --color=always ' . g:fzf_rg_glob . ' ' . shellescape(<q-args>),
        \   0,
        \   fzf#vim#with_preview(
        \     { 'options': '--color --exact --delimiter : --nth 3..' },
        \     'up:50%'
        \   ),
        \   <bang>1
        \ )

	nnoremap <C-p> :GFiles -co --exclude-standard<Cr>
  nnoremap <C-m> :History<Cr>

  augroup fzf
    autocmd FileType fzf tunmap <buffer> <Esc>
  augroup END
'''

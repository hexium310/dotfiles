[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \  'colorscheme': 'onedark',
        \  'active': {
        \    'left': [
        \      ['mode', 'paste'],
        \      ['readonly', 'filename', 'modified', 'dir'],
        \      ['sign'],
        \      ['anzu'],
        \    ],
        \    'right': [
        \      ['lineinfo', 'rows'],
        \      ['fileencoding', 'filetype'],
        \    ],
        \  },
        \  'tabline': {
        \    'right': [],
        \  },
        \  'component': {
        \    'dir': '%.35(%{expand("%:h:s?\\S$?\\0/?")}%)',
        \    'rows': '%LL',
        \  },
        \  'component_function': {
        \    'readonly': 'Readonly',
        \    'anzu': 'anzu#search_status',
        \  },
        \  'component_expand': {
        \    'sign': 'Sign',
        \  },
        \  'component_type': {
        \    'sign': 'error',
        \  },
        \}

  function! Readonly()
    return &readonly || &filetype == 'help' ? 'ðŸ‘€' : ''
  endfunction

  function! Sign()
    let count = len(getloclist(0))
    return count == 0 ? '' : 'âœ– ' . count
  endfunction

  let s:palette = g:lightline#colorscheme#{g:lightline.colorscheme}#palette
  let s:palette.normal.error = [['#ebcb8b', '#bf616a', '07', '01']]
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_smart_case = 1
  let g:clever_f_use_migemo = 1
  let g:clever_f_fix_key_direction = 1
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_custom_ignore = '\v[\/](node_modules|\.git)$'
  let g:ctrlp_show_hidden = 1
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  let g:context_filetype#filetypes = {
        \   'typescript.tsx': [
        \     {
        \       'start': '\v(styled\..*|css)`',
        \       'end': '`',
        \       'filetype': 'sass',
        \     },
        \   ],
        \ }
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'lambdalisue/vim-gista'

[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
  nnoremap <silent> <Space>e :Dirvish<CR>
  nnoremap <silent> <Space>r :Dirvish %<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'css', 'javascript', 'typescript']
hook_add = '''
  let g:user_emmet_settings = {
        \  'javascript': {
        \    'extends': 'jsx',
        \  },
        \  'typescript': {
        \    'extends': 'jsx',
        \  },
        \  'variables': {
        \    'lang': 'ja',
        \  },
        \}
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap <silent> <Esc><Esc> <Plug>(anzu-clear-search-status):nohlsearch<Cr>
  nmap n <Plug>(anzu-n)zz
  nmap N <Plug>(anzu-N)zz
  nmap * <Plug>(anzu-star)zz
  nmap # <Plug>(anzu-sharp)zz

  augroup vim-anzu
    autocmd!
    autocmd WinLeave, TabLeave * call anzu#clear_search_status()
  augroup END
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
  nmap <Space>J <Plug>(jplus-getchar)
  vmap <Space>J <Plug>(jplus-getchar)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)
  nmap <silent>sd <Plug>(operator-surround-delete)
  nmap <silent>sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
hook_add = '''
  map y <Plug>(operator-flashy)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'
hook_add = '''
  nmap R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'

[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  let g:caw_operator_keymappings = 1
  nmap <Space>c <Plug>(caw:prefix)
  vmap <Space>c <Plug>(caw:prefix)
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_linters = {
        \  'typescript': ['eslint'],
        \}
  let g:ale_fixers = {
        \  'typescript': ['eslint'],
        \}
  let g:ale_lint_delay = 50
  let g:ale_sign_error = 'âœ–'
  let g:ale_sign_warning = 'âš ï¸Ž'
  let g:ale_echo_msg_error_str = 'âœ–'
  let g:ale_echo_msg_warning_str = 'âš ï¸Ž'
  let g:ale_echo_msg_format = '%severity% [%linter%] %s'

  nmap <silent> <Space>ap <Plug>(ale_previous_wrap)
  nmap <silent> <Space>an <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
